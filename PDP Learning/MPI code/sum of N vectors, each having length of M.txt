#include <mpi.h>
#include <vector>
#include <iostream>

// compute the sum of N vectors, each having the same length

int get_vector_sum(std::vector<int> vect)
{
	int s = 0;
	for (int i = 0; i < vect.size(); i++)
	{
		s += vect[i];
	}
	return s;
}

int main(int argc, char** argv)
{
	// Initialize the MPI environment
	MPI_Init(nullptr, nullptr);

	// Get the number of processes
	int world_size;
	MPI_Comm_size(MPI_COMM_WORLD, &world_size);

	// Get the rank of the process
	int world_rank;
	MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);


	if (world_rank == 0) // master
	{
		int total_sum = 0;

		std::vector<int> V1 = {1, 2, 3, 4, 5, 6};
		std::vector<int> V2 = {1, 2, 3, 4, 5, 6};
		std::vector<int> V3 = {1, 2, 3, 4, 5, 6};
		std::vector<int> V4 = {1, 2, 3, 4, 5, 6};
		std::vector<int> V5 = {1, 2, 3, 4, 5, 6};
		std::vector<int> V6 = {1, 1, 1, 1, 1, 1};

		std::vector<std::vector<int>> vects;
		vects.push_back(V1);
		vects.push_back(V2);
		vects.push_back(V3);
		vects.push_back(V4);
		vects.push_back(V5);
		vects.push_back(V6);

		int nr_of_vectors = vects.size();
		int single_vector_length = vects[0].size();

		// split the work and give to workers

		int nr_of_vectors_per_worker = nr_of_vectors / world_size;
		int rest = nr_of_vectors % world_size;

		// master has nr_of_vectors_per_worker + rest vectors to sum up.

		int vector_nr_to_send = nr_of_vectors_per_worker + rest;

		for (int worker_nr = 1; worker_nr < world_size; worker_nr++)
		{
			// for each worker, send how many vectors to receive, their length, and the vectors themselves. receive back the sum.

			MPI_Send(&nr_of_vectors_per_worker, 1, MPI_INT, worker_nr, 0, MPI_COMM_WORLD);
			MPI_Send(&single_vector_length, 1, MPI_INT, worker_nr, 0, MPI_COMM_WORLD);

			for (int i = 0; i < nr_of_vectors_per_worker; i++) // send the vectors
			{
				std::vector<int> current_vector;
				current_vector = vects[vector_nr_to_send];

				MPI_Send(&current_vector[0], single_vector_length, MPI_INT, worker_nr, 0, MPI_COMM_WORLD);
				vector_nr_to_send++;
			}
		}

		std::vector<int> current_vector;
		// sum up the vectors for the master worker
		for (int i = 0; i < nr_of_vectors_per_worker + rest; i++)
		{
			current_vector = vects[i];
			total_sum += get_vector_sum(current_vector);
		}

		// get back the sums from the slaves
		int partial_sum = 0;
		for (int worker_nr = 1; worker_nr < world_size; worker_nr++)
		{
			MPI_Recv(&partial_sum, 1, MPI_INT, MPI_ANY_SOURCE, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
			total_sum += partial_sum;
		}

		std::cout << total_sum;
	}
	else // slaves
	{
		int s = 0;
		int single_vector_length = 0;
		int nr_of_vectors_per_worker = 0;
		std::vector<std::vector<int>> vectors;


		MPI_Recv(&nr_of_vectors_per_worker, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
		MPI_Recv(&single_vector_length, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

		std::vector<int> current_vector;
		current_vector.resize(single_vector_length);
		for (int i = 0; i < nr_of_vectors_per_worker; i++)
		{
			MPI_Recv(&current_vector[0], single_vector_length, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
			vectors.push_back(current_vector);
		}

		// then sum them all
		for (const auto& vector : vectors)
		{
			s += get_vector_sum(vector);
			
		}
		std::cout << "Worker " << world_rank << " has computed the sum: " << s << std::endl;
		MPI_Send(&s, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);
	}


	// Finalize the MPI environment.
	MPI_Finalize();
}
